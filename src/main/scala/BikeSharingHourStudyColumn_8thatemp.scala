import org.apache.spark.sql._
import org.apache.spark.{SparkConf, SparkContext}

object BikeSharingHourStudyColumn_8thatemp {

  def main(args: Array[String]): Unit = {

    import org.apache.log4j._
    Logger.getLogger("org").setLevel(Level.ERROR)

    val conf = new SparkConf().setAppName("retail").setMaster("local[*]")
    val sc = new SparkContext(conf)
    val spark = SparkSession.builder().appName("retail1").
      master("local[1*").getOrCreate()

    val dataRDD = sc.textFile("hour.csv")

    val dataRDDNoHeader = dataRDD.filter(line => line.split(",")(0) != "instant")
    val data0 = dataRDDNoHeader.map(line => {
      val arr = line.split(",")
      (arr(11).toDouble, arr(16).toDouble)}).
      map(tuple => (tuple._1, (tuple._2, 1))).
      reduceByKey((a, b)=> (a._1+b._1, a._2+b._2)).
      map(yrCount => (yrCount._1, yrCount._2._1/yrCount._2._2)).  //1st output
      map( a => (a._2, a._1)).sortByKey().collect.toList
      //map(yrCount => (yrCount._1, yrCount._2._1/yrCount._2._2)).sortByKey().collect.toList  //second output

    for(d <- data0) print(d._2+ "/ ")
    println("")
    for(d <- data0) print(d._1+ "/ ")
  }
/*
output:  201808151158
1st:
0.0152/ 0.0303/ 0.0/ 0.0455/ 0.0758/ 0.0606/ 0.1667/ 0.1061/ 0.1364/ 0.1515/ 0.0909/ 0.1212/ 0.197/ 0.1818/ 0.2121/ 0.2273/ 0.2576/ 0.2424/
0.2727/ 1.0/ 0.2879/ 0.9545/ 0.5606/ 0.303/ 0.3182/ 0.9848/ 0.3636/ 0.3788/ 0.3485/ 0.3333/ 0.5758/ 0.4394/ 0.4545/ 0.3939/ 0.4091/ 0.5909/
0.4242/ 0.5455/ 0.5152/ 0.4697/ 0.4848/ 0.5/ 0.5303/ 0.6061/ 0.8939/ 0.8333/ 0.8788/ 0.6364/ 0.9242/ 0.6667/ 0.697/ 0.8485/ 0.7879/ 0.8182/
.8636/ 0.6818/ 0.9091/ 0.7121/ 0.7424/ 0.803/ 0.6212/ 0.6515/ 0.7727/ 0.7576/ 0.7273/
3.25/ 13.875/ 19.5/ 32.666666666666664/ 34.32142857142857/ 49.0/ 52.42696629213483/ 60.17142857142857/ 60.55555555555556/ 61.495726495726494/
62.23076923076923/ 68.34883720930233/ 71.3157894736842/ 73.93125/ 81.66257668711657/ 84.35820895522389/ 86.18483412322274/ 94.55972696245733/
96.21969696969697/ 101.0/ 107.62614678899082/ 115.0/ 122.57692307692308/ 124.51001821493625/ 125.49385749385749/ 128.0/ 129.84831460674158/
136.4814814814815/ 141.76351351351352/ 142.28333333333333/ 145.06424581005587/ 158.90729783037474/ 162.90697674418604/ 164.21236559139786/
167.44136807817588/ 169.9271844660194/ 175.3412408759124/ 179.3272357723577/ 190.00485436893203/ 190.43402777777777/ 198.42937853107344/
199.4608695652174/ 213.74093264248705/ 219.64285714285714/ 233.06666666666666/ 247.1219512195122/ 255.05263157894737/ 255.5287610619469/
256.2/ 262.6205733558179/ 288.0541760722348/ 289.96875/ 297.0078125/ 301.7846153846154/ 307.1/ 307.5590551181102/ 308.0/ 311.2248062015504/
313.18461538461537/ 313.7586206896552/ 315.2419028340081/ 327.96177062374244/ 331.6044776119403/ 341.16901408450707/ 344.2032085561497/
2nd
19.5/ 3.25/ 13.875/ 32.666666666666664/ 49.0/ 34.32142857142857/ 62.23076923076923/ 60.17142857142857/ 68.34883720930233/ 60.55555555555556/
61.495726495726494/ 52.42696629213483/ 73.93125/ 71.3157894736842/ 81.66257668711657/ 84.35820895522389/ 94.55972696245733/ 86.18483412322274/
96.21969696969697/ 107.62614678899082/ 124.51001821493625/ 125.49385749385749/ 142.28333333333333/ 141.76351351351352/ 129.84831460674158/
136.4814814814815/ 164.21236559139786/ 167.44136807817588/ 175.3412408759124/ 158.90729783037474/ 162.90697674418604/ 190.43402777777777/
198.42937853107344/ 199.4608695652174/ 190.00485436893203/ 213.74093264248705/ 179.3272357723577/ 122.57692307692308/ 145.06424581005587/
169.9271844660194/ 219.64285714285714/ 315.2419028340081/ 255.5287610619469/ 327.96177062374244/ 262.6205733558179/ 307.5590551181102/
288.0541760722348/ 311.2248062015504/ 344.2032085561497/ 313.18461538461537/ 341.16901408450707/ 331.6044776119403/ 297.0078125/
13.7586206896552/ 301.7846153846154/ 247.1219512195122/ 289.96875/ 307.1/ 255.05263157894737/ 233.06666666666666/ 308.0/ 256.2/ 115.0/ 128.0/
101.0/
0.0/ 0.0152/ 0.0303/ 0.0455/ 0.0606/ 0.0758/ 0.0909/ 0.1061/ 0.1212/ 0.1364/ 0.1515/ 0.1667/ 0.1818/ 0.197/ 0.2121/ 0.2273/ 0.2424/ 0.2576/
0.2727/ 0.2879/ 0.303/ 0.3182/ 0.3333/ 0.3485/ 0.3636/ 0.3788/ 0.3939/ 0.4091/ 0.4242/ 0.4394/ 0.4545/ 0.4697/ 0.4848/ 0.5/ 0.5152/ 0.5303/
0.5455/ 0.5606/ 0.5758/ 0.5909/ 0.6061/ 0.6212/ 0.6364/ 0.6515/ 0.6667/ 0.6818/ 0.697/ 0.7121/ 0.7273/ 0.7424/ 0.7576/ 0.7727/ 0.7879/ 0.803/
0.8182/ 0.8333/ 0.8485/ 0.8636/ 0.8788/ 0.8939/ 0.9091/ 0.9242/ 0.9545/ 0.9848/ 1.0/    (65 samples)
*/
}