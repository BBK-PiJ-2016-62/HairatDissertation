import org.apache.spark.sql._
import org.apache.spark.{SparkConf, SparkContext}

object BikeSharingHourStudyColumn_10thwindspeed {

  def main(args: Array[String]): Unit = {

    import org.apache.log4j._
    Logger.getLogger("org").setLevel(Level.ERROR)

    val conf = new SparkConf().setAppName("retail").setMaster("local[*]")
    val sc = new SparkContext(conf)
    val spark = SparkSession.builder().appName("retail1").
      master("local[1*").getOrCreate()

    val dataRDD = sc.textFile("hour.csv")

    val dataRDDNoHeader = dataRDD.filter(line => line.split(",")(0) != "instant")
    val data0 = dataRDDNoHeader.map(line => {
      val arr = line.split(",")
      (arr(13).toDouble, arr(16).toDouble)}).
      map(tuple => (tuple._1, (tuple._2, 1))).
      reduceByKey((a, b)=> (a._1+b._1, a._2+b._2)).
      //map(wspCount => (wspCount._1, wspCount._2._1/wspCount._2._2)).  //1st output
      //map( a => (a._2, a._1)).sortByKey().collect.toList
      map(yrCount => (yrCount._1, yrCount._2._1/yrCount._2._2)).sortByKey().collect.toList  //second output

    for(d <- data0) print(d._2+ "/ ")
    println("")
    for(d <- data0) print(d._1+ "/ ")
  }
/*
output:  201808151158
1st:
0.7761/ 0.8358/ 0.806/ 0.6866/ 0.7164/ 0.6418/ 0.0896/ 0.0/ 0.6119/ 0.5522/ 0.5821/ 0.1045/ 0.1343/ 0.7463/ 0.6567/ 0.4925/ 0.1642/ 0.4627/
0.3284/ 0.194/ 0.5224/ 0.4478/ 0.3582/ 0.2239/ 0.2537/ 0.4179/ 0.2985/ 0.2836/ 0.3881/ 0.8507/
5.0/ 16.0/ 103.5/ 117.8/ 140.5/ 145.35714285714286/ 150.0378947368421/ 160.6435779816514/ 160.65217391304347/ 161.07692307692307/
163.5681818181818/ 166.24675324675326/ 176.3078250863061/ 180.0/ 192.0/ 193.21428571428572/ 196.4589970501475/ 196.8082191780822/
197.14950166112956/ 200.6077248038624/ 201.82142857142858/ 208.01136363636363/ 210.02826086956523/ 211.9484467944481/ 213.8069498069498/
214.11486486486487/ 215.06683168316832/ 215.53625954198472/ 222.7795275590551/ 269.5/
2nd
160.6435779816514/ 150.0378947368421/ 166.24675324675326/ 176.3078250863061/ 196.4589970501475/ 200.6077248038624/ 211.9484467944481/
213.8069498069498/ 215.53625954198472/ 215.06683168316832/ 197.14950166112956/ 210.02826086956523/ 222.7795275590551/ 214.11486486486487/
208.01136363636363/ 196.8082191780822/ 193.21428571428572/ 201.82142857142858/ 161.07692307692307/ 163.5681818181818/ 160.65217391304347/
145.35714285714286/ 192.0/ 117.8/ 140.5/ 180.0/ 5.0/ 103.5/ 16.0/ 269.5/
0.0/ 0.0896/ 0.1045/ 0.1343/ 0.1642/ 0.194/ 0.2239/ 0.2537/ 0.2836/ 0.2985/ 0.3284/ 0.3582/ 0.3881/ 0.4179/ 0.4478/ 0.4627/ 0.4925/ 0.5224/
0.5522/ 0.5821/ 0.6119/ 0.6418/ 0.6567/ 0.6866/ 0.7164/ 0.7463/ 0.7761/ 0.806/ 0.8358/ 0.8507/
*/
}