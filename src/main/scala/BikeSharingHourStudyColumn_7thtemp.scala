import org.apache.spark.sql._
import org.apache.spark.{SparkConf, SparkContext}

object BikeSharingHourStudyColumn_7thtemp {

  def main(args: Array[String]): Unit = {

    import org.apache.log4j._
    Logger.getLogger("org").setLevel(Level.ERROR)

    val conf = new SparkConf().setAppName("retail").setMaster("local[*]")
    val sc = new SparkContext(conf)
    val spark = SparkSession.builder().appName("retail1").
      master("local[1*").getOrCreate()

    val dataRDD = sc.textFile("hour.csv")

    val dataRDDNoHeader = dataRDD.filter(line => line.split(",")(0) != "instant")
    val data0 = dataRDDNoHeader.map(line => {
      val arr = line.split(",")
      (arr(10).toDouble, arr(16).toDouble)}).
      map(tuple => (tuple._1, (tuple._2, 1))).
      reduceByKey((a, b)=> (a._1+b._1, a._2+b._2)).
      //map(yrCount => (yrCount._1, yrCount._2._1/yrCount._2._2)).  //1st output
      //map( a => (a._2, a._1)).sortByKey().collect.toList
      map(yrCount => (yrCount._1, yrCount._2._1/yrCount._2._2)).sortByKey().collect.toList  //second output

    for(d <- data0) print(d._2+ "/ ")
    println("")
    for(d <- data0) print(d._1+ "/ ")
  }
/*
output:  201808151158
1st:
0.08/ 0.04/ 0.02/ 0.06/ 0.1/ 0.14/ 0.12/ 0.18/ 0.16/ 0.22/ 0.2/ 0.24/ 0.26/ 0.28/ 0.3/ 0.32/ 0.34/ 0.36/ 0.44/ 0.46/ 0.38/ 0.4/ 0.42/ 0.48/
0.5/ 0.54/ 0.52/ 0.62/ 0.68/ 0.56/ 0.94/ 0.58/ 0.6/ 0.64/ 0.66/ 0.7/ 0.96/ 0.72/ 1.0/ 0.9/ 0.74/ 0.78/ 0.92/ 0.86/ 0.84/ 0.82/ 0.76/ 0.8/
0.88/ 0.98/
28.235294117647058/ 35.625/ 41.88235294117647/ 42.0/ 49.294117647058826/ 55.108695652173914/ 58.421052631578945/ 60.116129032258065/
65.57826086956521/ 69.91448931116389/ 79.7457627118644/ 80.15900383141762/ 87.96064400715564/ 106.75083056478405/ 115.91731669266771/
134.23076923076923/ 135.30852713178294/ 147.84202682563338/ 158.90729783037474/ 162.90697674418604/ 164.21236559139786/ 167.44136807817588/
175.3412408759124/ 190.43402777777777/ 198.42937853107344/ 200.2847100175747/ 202.96762589928056/ 204.11157024793388/ 209.53868194842406/
213.74093264248705/ 217.05882352941177/ 222.0655737704918/ 222.0814814814815/ 223.96676300578034/ 225.4025974025974/ 256.9536231884058/
274.5/ 286.7526315789474/ 294.0/ 309.2888888888889/ 313.1531007751938/ 313.1952662721894/ 320.0204081632653/ 322.9541984732824/
325.8188405797101/ 339.6901408450704/ 342.57575757575756/ 347.37538461538463/ 363.66037735849056/ 539.0/
2nd
41.88235294117647/ 35.625/ 42.0/ 28.235294117647058/ 49.294117647058826/ 58.421052631578945/ 55.108695652173914/ 65.57826086956521/
60.116129032258065/ 79.7457627118644/ 69.91448931116389/ 80.15900383141762/ 87.96064400715564/ 106.75083056478405/ 115.91731669266771/
134.23076923076923/ 135.30852713178294/ 147.84202682563338/ 164.21236559139786/ 167.44136807817588/ 175.3412408759124/ 158.90729783037474/
162.90697674418604/ 190.43402777777777/ 198.42937853107344/ 202.96762589928056/ 200.2847100175747/ 213.74093264248705/ 222.0655737704918/
22.0814814814815/ 204.11157024793388/ 223.96676300578034/ 225.4025974025974/ 209.53868194842406/ 256.9536231884058/ 286.7526315789474/
313.1531007751938/ 342.57575757575756/ 313.1952662721894/ 347.37538461538463/ 339.6901408450704/ 325.8188405797101/ 322.9541984732824/
363.66037735849056/ 309.2888888888889/ 320.0204081632653/ 217.05882352941177/ 274.5/ 539.0/ 294.0/
0.02/ 0.04/ 0.06/ 0.08/ 0.1/ 0.12/ 0.14/ 0.16/ 0.18/ 0.2/ 0.22/ 0.24/ 0.26/ 0.28/ 0.3/ 0.32/ 0.34/ 0.36/ 0.38/ 0.4/ 0.42/ 0.44/ 0.46/
0.48/ 0.5/ 0.52/ 0.54/ 0.56/ 0.58/ 0.6/ 0.62/ 0.64/ 0.66/ 0.68/ 0.7/ 0.72/ 0.74/ 0.76/ 0.78/ 0.8/ 0.82/ 0.84/ 0.86/ 0.88/ 0.9/ 0.92/ 0.94/
0.96/ 0.98/ 1.0/  (50 samples)
   */
}